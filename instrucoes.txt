# Sistema de Gest√£o Musical - Par√≥quia Boa Viagem
## Instru√ß√µes de Instala√ß√£o e Configura√ß√£o Local

### üîß Pr√©-requisitos
- Node.js 18+ instalado
- PostgreSQL instalado (ou conta no Supabase)
- Git instalado

### üì¶ Instala√ß√£o Local

1. **Clone o reposit√≥rio:**
```bash
git clone <url-do-repositorio>
cd sistema-gestao-musical
```

2. **Instale as depend√™ncias:**
```bash
npm install
```

3. **Configure as vari√°veis de ambiente:**
Crie um arquivo `.env` na raiz do projeto:
```
# Database (PostgreSQL local ou Supabase)
DATABASE_URL=postgresql://usuario:senha@localhost:5432/gestao_musical

# YouTube Data API v3
YOUTUBE_API_KEY=AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM

# Configura√ß√µes de autentica√ß√£o
JWT_SECRET=sua_chave_secreta_jwt_muito_segura_aqui
SESSION_SECRET=sua_chave_de_sessao_muito_segura_aqui

# Ambiente
NODE_ENV=development
PORT=5000
```

4. **Configure o banco de dados:**
```bash
# Criar o banco de dados (se usando PostgreSQL local)
createdb gestao_musical

# Executar as migra√ß√µes
npm run db:push

# Popular com dados iniciais
npm run seed
```

5. **Inicie a aplica√ß√£o:**
```bash
npm run dev
```

A aplica√ß√£o estar√° dispon√≠vel em: `http://localhost:5000`

### üîë Credenciais Iniciais
- **Email:** wijosi59@gmail.com
- **Senha:** 88928883

**‚ö†Ô∏è IMPORTANTE:** Altere essa senha ap√≥s o primeiro login!

---

## üåê Integra√ß√£o com Supabase

### 1. Criar Projeto no Supabase
1. Acesse [supabase.com](https://supabase.com)
2. Crie uma nova conta ou fa√ßa login
3. Clique em "New Project"
4. Escolha sua organiza√ß√£o
5. Defina nome do projeto: "gestao-musical-paroquia"
6. Defina uma senha para o banco
7. Escolha a regi√£o mais pr√≥xima (South America - S√£o Paulo)

### 2. Configurar Banco de Dados
1. No painel do Supabase, v√° em "SQL Editor"
2. Clique em "New Query"
3. Cole o SQL completo abaixo e execute:

```sql
-- ========================================
-- SCHEMA COMPLETO - SISTEMA GEST√ÉO MUSICAL
-- ========================================

-- Extens√µes necess√°rias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ========================================
-- TABELAS DE AUTENTICA√á√ÉO
-- ========================================

-- Tabela de usu√°rios para autentica√ß√£o
CREATE TABLE auth_users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('admin', 'musico')),
    instrumento VARCHAR(100),
    telefone VARCHAR(20),
    foto TEXT,
    ativo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Tabela para tokens de recupera√ß√£o de senha
CREATE TABLE password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Tabela para sess√µes de usu√°rio
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    last_activity TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW()
);

-- ========================================
-- TABELAS PRINCIPAIS DO SISTEMA
-- ========================================

-- Tabela de usu√°rios legacy (compatibilidade)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL
);

-- Tabela de m√∫sicos
CREATE TABLE musicos (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    nome TEXT NOT NULL,
    funcao TEXT NOT NULL,
    disponivel BOOLEAN NOT NULL DEFAULT true,
    email TEXT,
    telefone TEXT,
    foto TEXT,
    observacoes_permanentes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de anota√ß√µes dos m√∫sicos
CREATE TABLE musico_anotacoes (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    texto TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de sugest√µes dos m√∫sicos
CREATE TABLE musico_sugestoes (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    texto TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pendente' CHECK (status IN ('pendente', 'implementada', 'recusada')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de missas
CREATE TABLE missas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    data DATE NOT NULL,
    horario TIME NOT NULL,
    tipo TEXT NOT NULL,
    observacoes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de relacionamento entre missas e m√∫sicos (escala√ß√£o)
CREATE TABLE missa_musicos (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    missa_id UUID REFERENCES missas(id) ON DELETE CASCADE NOT NULL,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    UNIQUE(missa_id, musico_id)
);

-- Tabela de m√∫sicas das missas
CREATE TABLE musicas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    missa_id UUID REFERENCES missas(id) ON DELETE CASCADE NOT NULL,
    nome TEXT NOT NULL,
    cantor TEXT,
    link_youtube TEXT,
    partitura TEXT,
    link_download TEXT,
    secao_liturgica TEXT NOT NULL,
    observacoes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela da biblioteca de m√∫sicas
CREATE TABLE biblioteca_musicas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    nome TEXT NOT NULL,
    cantor TEXT,
    link_youtube TEXT,
    partitura TEXT,
    link_download TEXT,
    secao_liturgica TEXT,
    observacoes TEXT,
    youtube_video_id TEXT,
    thumbnail TEXT,
    duracao TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- ========================================
-- √çNDICES PARA PERFORMANCE
-- ========================================

-- √çndices autentica√ß√£o
CREATE INDEX idx_auth_users_email ON auth_users(email);
CREATE INDEX idx_auth_users_tipo ON auth_users(tipo);
CREATE INDEX idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);
CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(token);

-- √çndices principais
CREATE INDEX idx_musicos_nome ON musicos(nome);
CREATE INDEX idx_musicos_funcao ON musicos(funcao);
CREATE INDEX idx_musicos_disponivel ON musicos(disponivel);
CREATE INDEX idx_musico_anotacoes_musico_id ON musico_anotacoes(musico_id);
CREATE INDEX idx_musico_sugestoes_musico_id ON musico_sugestoes(musico_id);
CREATE INDEX idx_musico_sugestoes_status ON musico_sugestoes(status);
CREATE INDEX idx_missas_data ON missas(data);
CREATE INDEX idx_missas_tipo ON missas(tipo);
CREATE INDEX idx_missa_musicos_missa_id ON missa_musicos(missa_id);
CREATE INDEX idx_missa_musicos_musico_id ON missa_musicos(musico_id);
CREATE INDEX idx_musicas_missa_id ON musicas(missa_id);
CREATE INDEX idx_musicas_secao_liturgica ON musicas(secao_liturgica);
CREATE INDEX idx_biblioteca_musicas_nome ON biblioteca_musicas(nome);
CREATE INDEX idx_biblioteca_musicas_secao_liturgica ON biblioteca_musicas(secao_liturgica);

-- ========================================
-- DADOS INICIAIS
-- ========================================

-- Administrador inicial (senha ser√° hasheada pela aplica√ß√£o)
-- Trocar para hash real: $2b$10$... gerado pela aplica√ß√£o
INSERT INTO auth_users (email, password, nome, tipo, ativo) VALUES 
('wijosi59@gmail.com', '$2b$10$placeholder_hash', 'Administrador', 'admin', true);

-- M√∫sico exemplo
INSERT INTO auth_users (email, password, nome, tipo, instrumento, telefone, ativo) VALUES 
('musico@paroquiaboaviagem.com', '$2b$10$placeholder_hash', 'M√∫sico Exemplo', 'musico', 'Viol√£o', '(31) 99999-9999', true);

-- ========================================
-- POLICIES DE SEGURAN√áA (RLS)
-- ========================================

-- Habilitar RLS nas tabelas principais
ALTER TABLE auth_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE musicos ENABLE ROW LEVEL SECURITY;
ALTER TABLE missas ENABLE ROW LEVEL SECURITY;
ALTER TABLE musicas ENABLE ROW LEVEL SECURITY;
ALTER TABLE biblioteca_musicas ENABLE ROW LEVEL SECURITY;

-- Policies b√°sicas (ajustar conforme necess√°rio)
CREATE POLICY "auth_users_policy" ON auth_users FOR ALL USING (true);
CREATE POLICY "musicos_policy" ON musicos FOR ALL USING (true);
CREATE POLICY "missas_policy" ON missas FOR ALL USING (true);
CREATE POLICY "musicas_policy" ON musicas FOR ALL USING (true);
CREATE POLICY "biblioteca_policy" ON biblioteca_musicas FOR ALL USING (true);
```

### 3. Configurar Vari√°veis de Ambiente no Supabase
1. No painel do Supabase, v√° em "Settings" > "Database"
2. Copie a "Connection string"
3. No seu `.env`, substitua DATABASE_URL pela URL do Supabase:
```
DATABASE_URL=postgresql://postgres:suasenha@db.xxxxxxxxxxxx.supabase.co:5432/postgres
```

### 4. Configurar API do YouTube
1. Acesse [Google Cloud Console](https://console.cloud.google.com)
2. Crie um novo projeto ou selecione existente
3. Ative a "YouTube Data API v3"
4. Crie credenciais (API Key)
5. Use a chave fornecida: `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`

---

## üöÄ Comandos √öteis

```bash
# Desenvolvimento
npm run dev              # Inicia servidor de desenvolvimento
npm run build           # Build para produ√ß√£o
npm run start           # Inicia servidor de produ√ß√£o

# Banco de dados
npm run db:push         # Aplica mudan√ßas no schema
npm run db:studio       # Interface visual do banco
npm run seed            # Popula dados iniciais

# Utilit√°rios
npm run lint            # Verifica c√≥digo
npm run type-check      # Verifica tipos TypeScript
```

---

## üîß Configura√ß√µes Importantes

### API Keys e Secrets
- **YouTube API Key:** `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`
- **JWT_SECRET:** Gere uma chave segura para produ√ß√£o
- **SESSION_SECRET:** Gere uma chave segura para sess√µes

### Recursos Externos Integrados
- **YouTube Data API v3:** Busca de v√≠deos e metadados
- **Cifras e Partituras Goi√¢nia:** Busca autom√°tica de partituras
- **CNV MP3:** Convers√£o de v√≠deos YouTube para MP3

### Funcionalidades Principais
- ‚úÖ Sistema de autentica√ß√£o completo
- ‚úÖ Gest√£o de m√∫sicos e escalas
- ‚úÖ Biblioteca de m√∫sicas com busca inteligente
- ‚úÖ Integra√ß√£o YouTube para busca de v√≠deos
- ‚úÖ Sistema de partituras (texto e links)
- ‚úÖ Relat√≥rios e hist√≥rico
- ‚úÖ Interface administrativa

---

## üõ†Ô∏è Troubleshooting

### Problema: Erro de conex√£o com banco
**Solu√ß√£o:** Verifique se a DATABASE_URL est√° correta e o banco est√° acess√≠vel

### Problema: API do YouTube n√£o funciona
**Solu√ß√£o:** Verifique se a YOUTUBE_API_KEY est√° configurada corretamente

### Problema: Erro de autentica√ß√£o
**Solu√ß√£o:** Verifique se JWT_SECRET e SESSION_SECRET est√£o configurados

### Problema: Migra√ß√µes n√£o aplicam
**Solu√ß√£o:** Execute `npm run db:push` manualmente

---

### üîß Configura√ß√µes Importantes

### API Keys e Secrets
- **YouTube API Key:** `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`
- **JWT_SECRET:** Gere uma chave segura para produ√ß√£o
- **SESSION_SECRET:** Gere uma chave segura para sess√µes

### Recursos Externos Integrados
- **YouTube Data API v3:** Busca de v√≠deos e metadados
- **Cifras e Partituras Goi√¢nia:** Busca autom√°tica de partituras (https://arquidiocesegoiania.org.br/cifras-e-partituras/)
- **CNV MP3:** Convers√£o de v√≠deos YouTube para MP3 (https://cnvmp3.com/v25/)

### Funcionalidades Principais
- ‚úÖ Sistema de autentica√ß√£o completo
- ‚úÖ Gest√£o de m√∫sicos e escalas
- ‚úÖ Biblioteca de m√∫sicas com busca inteligente
- ‚úÖ Integra√ß√£o YouTube para busca de v√≠deos
- ‚úÖ Sistema de partituras (texto e links)
- ‚úÖ Relat√≥rios e hist√≥rico
- ‚úÖ Interface administrativa
- ‚úÖ Controle completo de disponibilidade dos m√∫sicos
- ‚úÖ Sistema de indisponibilidades com per√≠odos e motivos
- ‚úÖ Verifica√ß√£o autom√°tica de disponibilidade para escalas
- ‚úÖ Dashboard anal√≠tico com gr√°ficos e m√©tricas
- ‚úÖ An√°lise de missas por m√™s, m√∫sicos mais atuantes
- ‚úÖ Ranking de m√∫sicas mais usadas
- ‚úÖ Gr√°ficos de disponibilidade do coral
- ‚úÖ Monitoramento de partes da missa carentes
- ‚úÖ Sistema de escala de m√∫sicos por missa
- ‚úÖ Interface com tema escuro otimizado
- ‚úÖ Sistema de escala√ß√£o de m√∫sicos com fun√ß√µes espec√≠ficas (vocal, back vocal, instrumental, solista)
- ‚úÖ Sele√ß√£o de partes da missa para cada m√∫sico (entrada, kyrie, gloria, aclama√ß√£o, ofert√≥rio, sanctus, comunh√£o, sa√≠da)
- ‚úÖ Integra√ß√£o YouTube com busca separada de partituras
- ‚úÖ Interface aprimorada com tabs para diferentes tipos de busca
- ‚úÖ Tema claro implementado como padr√£o com melhor contraste
- ‚úÖ Cards com cantos arredondados (8px) e sombras suaves
- ‚úÖ Fundo levemente cinza-claro para melhor legibilidade
- ‚úÖ Bot√µes com contraste adequado e tipografia clara
- ‚úÖ Toggle de tema claro/escuro dispon√≠vel na sidebar
- ‚úÖ Interface otimizada para usu√°rios mais velhos

### Sistema de Disponibilidade
**Como funciona:**
- Coordenador pode registrar indisponibilidades para qualquer m√∫sico
- Motivos: F√©rias, Compromisso Pessoal, Outro (campo livre)
- Per√≠odos: Dia √∫nico ou intervalo de datas
- Integra√ß√£o: Sistema verifica automaticamente disponibilidade ao escalar missas
- Futuro: M√∫sicos poder√£o fazer auto-registro de indisponibilidades

**Hooks importantes:**
- `useApi()` - Comunica√ß√£o com backend
- `useMissas()` - Gest√£o de missas e escalas
- `useMusicos()` - Gest√£o de m√∫sicos
- `useBibliotecaMusicas()` - Biblioteca de m√∫sicas

### Estrutura do Banco
**Tabelas principais:**
- `auth_users` - Sistema de autentica√ß√£o
- `musicos` - Cadastro de m√∫sicos do coral
- `missas` - Missas programadas
- `musicas` - M√∫sicas das missas
- `biblioteca_musicas` - Biblioteca centralizada
- `musico_indisponibilidade` - Controle de aus√™ncias
- `musico_anotacoes` - Anota√ß√µes sobre m√∫sicos
- `musico_sugestoes` - Sugest√µes e aprova√ß√µes

**SQL da tabela de indisponibilidades:**
```sql
CREATE TABLE musico_indisponibilidade (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  musico_id UUID NOT NULL REFERENCES musicos(id) ON DELETE CASCADE,
  data_inicio DATE NOT NULL,
  data_fim DATE NOT NULL,
  motivo TEXT NOT NULL, -- 'ferias', 'compromisso_pessoal', 'outro'
  motivo_outro TEXT, -- quando motivo = 'outro'
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
```

### MP3 Download Integration
- Utiliza servi√ßo CNV MP3 para converter v√≠deos YouTube
- Link autom√°tico gerado: `https://cnvmp3.com/v25/[VIDEO_ID]`
- Dispon√≠vel em todos os cards de m√∫sica com link YouTube

### Dashboard Anal√≠tico
**Gr√°ficos implementados:**
- **Missas por m√™s:** Gr√°fico de barras mostrando quantidade de missas nos √∫ltimos 6 meses
- **M√∫sicos mais atuantes:** Ranking horizontal de participa√ß√£o por m√∫sico
- **Sugest√µes por status:** Gr√°fico de pizza com pendentes, aprovadas e recusadas
- **M√∫sicas mais usadas:** Top 5 m√∫sicas mais frequentes em gr√°fico de colunas
- **Disponibilidade do coral:** Gr√°fico de linha mostrando tend√™ncias de disponibilidade
- **Partes da missa carentes:** Barras de progresso indicando preenchimento por se√ß√£o

### Sistema de Escala Musical
**Por missa, controle de:**
- Entrada, Kyrie, Gloria, Aclama√ß√£o ao Evangelho
- Ofert√≥rio, Sanctus, Comunh√£o, Sa√≠da
- Back Vocal e observa√ß√µes espec√≠ficas por parte
- Sele√ß√£o de m√∫sicos dispon√≠veis para cada fun√ß√£o
- Verifica√ß√£o autom√°tica de conflitos de disponibilidade

---

## üìû Suporte
Para d√∫vidas ou problemas, consulte:
- Documenta√ß√£o do projeto no reposit√≥rio
- Logs da aplica√ß√£o em `logs/`
- Console do navegador para erros frontend